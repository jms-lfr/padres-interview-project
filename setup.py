import psycopg2 
from psycopg2.extras import execute_values
from dotenv import load_dotenv
from os import environ, remove
from os.path import abspath
from pandas import DataFrame, read_csv
from utils import teamToAbbrv

_ = load_dotenv()
DB_NAME = environ.get("DB_NAME")
DB_USER = environ.get("DB_USER")
DB_PASS = environ.get("DB_PASSWORD")
DB_HOST = environ.get("DB_HOST")
DB_PORT = environ.get("DB_PORT")
CSV_FILE = environ.get("CSV_FILENAME")

def main():
    with psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASS, host=DB_HOST, port=DB_PORT) as conn:
        with conn.cursor() as cur:
            cur.execute("DROP TABLE IF EXISTS plays, players")

            # generated by getting column names from first row of csv,
            # then inputting what the column type should be, if nullable, etc.
            plays_sql = """CREATE TABLE plays (
                        game_date DATE,
                        game_bam_id INTEGER,
                        venue_bam_id INTEGER,
                        venue VARCHAR(30),
                        league CHAR(2),
                        away_team CHAR(3),
                        home_team CHAR(3),
                        guid UUID,
                        pitch_seq INTEGER,
                        is_pitch BOOLEAN,
                        is_pickoff BOOLEAN,
                        is_stepoff BOOLEAN,
                        is_pitchout BOOLEAN,
                        is_balk BOOLEAN,
                        terminating BOOLEAN,
                        pitch_code VARCHAR(3),
                        pitch_result VARCHAR(15),
                        event_type VARCHAR(25) NULL,
                        inning INTEGER,
                        bottom BOOLEAN,
                        at_bat_number INTEGER,
                        pre_balls INTEGER, pre_strikes INTEGER,
                        pre_outs INTEGER,
                        pre_basecode CHAR(3),
                        pre_vscore INTEGER,
                        pre_hscore INTEGER,
                        pre_r1_bam_id INTEGER NULL,
                        pre_r2_bam_id INTEGER NULL,
                        pre_r3_bam_id INTEGER NULL,
                        post_balls INTEGER,
                        post_strikes INTEGER,
                        post_outs INTEGER,
                        post_basecode CHAR(3),
                        post_vscore INTEGER,
                        post_hscore INTEGER,
                        post_r1_bam_id INTEGER NULL,
                        post_r2_bam_id INTEGER NULL,
                        post_r3_bam_id INTEGER NULL,
                        pitcher_team_bam_id BOOLEAN,
                        pitcher_team CHAR(3),
                        pitcher_bam_id INTEGER,
                        pitcher_name_first VARCHAR(30),
                        pitcher_name_last VARCHAR(30),
                        pitcher_set CHAR(7) NULL,
                        pitcher_side CHAR(1),
                        pitcher_type CHAR(1),
                        batter_team_bam_id INTEGER,
                        batter_team CHAR(3),
                        batter_bam_id INTEGER,
                        batter_name_first VARCHAR(30),
                        batter_name_last VARCHAR(30),
                        batter_side CHAR(1),
                        batter_position INTEGER,
                        catcher_bam_id INTEGER,
                        b1_bam_id INTEGER,
                        b2_bam_id INTEGER,
                        b3_bam_id INTEGER,
                        ss_bam_id INTEGER,
                        lf_bam_id INTEGER,
                        cf_bam_id INTEGER,
                        rf_bam_id INTEGER,
                        fielder_position INTEGER NULL,
                        fielder_bam_id INTEGER NULL,
                        strikezone_top NUMERIC(8, 6),
                        strikezone_bot NUMERIC(8, 6),
                        pitch_type CHAR(2) NULL,
                        rel_speed NUMERIC(9, 6) NULL,
                        rel_angle NUMERIC(8, 6) NULL,
                        rel_direction NUMERIC(8, 6) NULL,
                        rel_side NUMERIC(8, 6) NULL,
                        rel_height NUMERIC(8, 6) NULL,
                        plate_time NUMERIC(4, 3) NULL,
                        spin_axis NUMERIC(7, 4) NULL,
                        spin_rate NUMERIC(7, 3) NULL,
                        horz_break NUMERIC(6, 3) NULL,
                        vert_break NUMERIC(6, 3) NULL,
                        induced_vert_break NUMERIC(6, 3) NULL,
                        zone_time NUMERIC(6, 5) NULL,
                        zone_speed NUMERIC(6, 3) NULL,
                        tilt VARCHAR(5),
                        extension NUMERIC(8, 6) NULL,
                        plate_x NUMERIC(8, 6) NULL,
                        plate_z NUMERIC(8, 6) NULL,
                        hit_trajectory VARCHAR(13),
                        hit_exit_speed NUMERIC(9, 6) NULL,
                        hit_vertical_angle NUMERIC(9, 6) NULL,
                        hit_horizontal_angle NUMERIC(9, 6) NULL,
                        hit_distance NUMERIC(6, 3) NULL,
                        hit_bearing NUMERIC(7, 3) NULL,
                        hit_swing_speed NUMERIC(3, 1) NULL,
                        hit_contact_x NUMERIC(6, 4) NULL,
                        hit_contact_y NUMERIC(6, 4) NULL,
                        hit_contact_z NUMERIC(6, 4) NULL,
                        vertical_bat_angle NUMERIC(9, 6) NULL,
                        horizontal_bat_angle NUMERIC(9, 6) NULL,
                        vertical_bat_attack_angle NUMERIC(9, 6) NULL,
                        horizontal_bat_attack_angle NUMERIC(9, 6) NULL,
                        bat_speed NUMERIC(6, 4) NULL,
                        wild_pitch BOOLEAN,
                        passed_ball BOOLEAN,
                        in_zone BOOLEAN,
                        swing BOOLEAN,
                        contact BOOLEAN,
                        in_play BOOLEAN,
                        ball BOOLEAN,
                        called_strike BOOLEAN,
                        swinging_strike BOOLEAN,
                        chase BOOLEAN,
                        foul BOOLEAN,
                        bunt_attempt BOOLEAN
                    );"""

            cur.execute(plays_sql);
            cur.execute("""CREATE TABLE players (
                   id INTEGER PRIMARY KEY,
                   name_first VARCHAR(30),
                   name_last VARCHAR(30),
                   team CHAR(3),
                   bats CHAR(1),
                   throws CHAR(1)
                );
            """)

            header = True
            # 3000 rows per chunk in case you have a
            # very large file that can't fit in memory
            for df in read_csv(CSV_FILE, chunksize=3000, 
                               dtype={"pre_basecode": str, # don't change "000", "001", etc. to 0, 1, etc.
                                      "post_basecode": str }, 
                               na_filter=False): 
                df.drop(columns=["description"], inplace=True)
                for col in ["home_team", "away_team", "pitcher_team", "batter_team"]:
                    df[col] = df[col].apply(teamToAbbrv)
                #for col in ["fielder_position", "fielder_bam_id", "pre_r1_bam_id", "pre_r2_bam_id", "pre_r3_bam_id", "post_r1_bam_id", "post_r2_bam_id", "post_r3_bam_id"]:
                    #df[col] = df[col].fillna(0).astype(int) # if there are nulls in the column, pandas treats them as float

                df["pitch_result"] = df["pitch_result"].apply(lambda x: x[:15].strip() if len(x) > 15 else x)
                
                df.to_csv("modified_data.csv", header=header, index=False, mode='a')
                header = False

            path = abspath("./modified_data.csv")
            try:
                cur.execute(f"""COPY plays
                            FROM '{path}'
                            DELIMITER ','
                            CSV HEADER;"""
                            )
            finally:
                remove("modified_data.csv")

            cur.execute("""SELECT DISTINCT ON (pitcher_bam_id) pitcher_bam_id,
                                pitcher_name_first,
                                pitcher_name_last,
                                away_team,
                                home_team,
                                bottom,
                                pitcher_side
                        FROM plays;
                        """)
            data_tuples = []
            for row in cur.fetchall():
                data_tuples.append( (row[0], # id
                                     row[1], row[2], # name
                                     row[3] if row[5] else row[4], # away team if pitching in bottom of inning
                                     'U', # bat side
                                     row[6] # throw side
                                    )
                                   )
            cur.execute("""SELECT DISTINCT ON (batter_bam_id) batter_bam_id,
                        batter_name_first,
                        batter_name_last,
                        away_team,
                        home_team,
                        bottom,
                        batter_side
                        FROM plays;
                        """)
            for row in cur.fetchall():
                data_tuples.append( (row[0], # id 
                                     row[1], row[2], # name 
                                     row[4] if row[5] else row[3],
                                     row[6], # bat side
                                     'U', # throw side
                                    ) 
                                   )

            execute_values(cur, """INSERT INTO players(id, 
                                                   name_first, name_last, 
                                                   team, 
                                                   bats, throws) 
                                VALUES %s 
                                ON CONFLICT DO NOTHING""", # two way players / no DH. could use a DO UPDATE instead
                           data_tuples)
    
        conn.commit()
    # main()

if __name__ == "__main__":
    main()

